{"version":3,"sources":["Recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","source","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipe","a","fetch","response","json","data","hits","console","log","onSubmit","event","preventDefault","type","value","onChange","target","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,mNCqB3CC,EAnBA,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,YAE7C,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BAAKP,GACL,4BACKI,EAAYI,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,UAGxB,2BAAIT,GACJ,yBAAKI,UAAWC,IAAMJ,MAAOS,IAAKT,EAAOU,IAAI,KAC7C,2BAAIT,KC8CDU,EAzDH,WAGV,IAHgB,EAOcC,mBAAS,IAPvB,mBAOTC,EAPS,KAOAC,EAPA,OAQYF,mBAAS,IARrB,mBAQTG,EARS,KAQDC,EARC,OASUJ,mBAAS,WATnB,mBASTK,EATS,KASFC,EATE,KAWhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCL,EAApC,mBAbf,WAae,oBAZd,qCAWE,cACVM,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJD,2CAAH,qDAiBf,OACE,yBAAKvB,UAAU,OACb,0BAAMA,UAAU,cAAc0B,SAPX,SAAAC,GACrBA,EAAMC,iBACNb,EAASH,KAML,2BAAOiB,KAAK,OAAO7B,UAAU,aAAa8B,MAAOlB,EAAQmB,SAZ1C,SAAAJ,GACjBd,EAAUc,EAAMK,OAAOF,UAYrB,4BAAQD,KAAK,SACL7B,UAAU,iBADlB,iBAIA,yBAAKA,UAAU,WAChBU,EAAQP,KAAI,SAAAD,GAAM,OAEf,kBAAC,EAAD,CACM+B,IAAK/B,EAAOA,OAAOgC,MACnBvC,MAAOO,EAAOA,OAAOgC,MACrBtC,SAAUM,EAAOA,OAAON,SACxBC,MAAOK,EAAOA,OAAOL,MACrBC,OAAQI,EAAOA,OAAOJ,OACtBC,YAAaG,EAAOA,OAAOH,oBCzCvBoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.0067b4da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipe_recipe__2nUwT\",\"image\":\"Recipe_image__1ZCMt\"};","import React from 'react';\r\nimport style from \"./Recipe.module.css\";\r\n\r\nconst Recipe = ({title, calories, image, source, ingredients}) =>{\r\n\r\n    return(\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>{calories}</p>\r\n            <img className={style.image} src={image} alt=\"\"/>\r\n            <p>{source}</p>\r\n           \r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport Recipe from './Recipe'\r\n\r\nconst App = () => {\r\n\r\n\r\n  const APP_ID = \"8484f0aa\";\r\n  const APP_KEY = \"ae99d1a2e275002fadd18758b4416f2c\";\r\n\r\n\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [query, setQuery] = useState('chicken');\r\n\r\n  useEffect(() => {\r\n    getRecipe();\r\n  }, [query]);\r\n\r\n  const getRecipe = async () => {\r\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\r\n    const data = await response.json();\r\n    setRecipes(data.hits);\r\n    console.log(data.hits);\r\n  }\r\n\r\n\r\n  const updateSearch = event => {\r\n      setSearch(event.target.value)\r\n  }\r\n\r\n  const getSearchQuery = event => {\r\n    event.preventDefault();\r\n    setQuery(search)\r\n}\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <form className=\"search-form\" onSubmit={getSearchQuery}>\r\n        <input type=\"text\" className=\"search-bar\" value={search} onChange={updateSearch}/>\r\n        <button type=\"submit\"\r\n                className=\"search-button\">Search movie</button>\r\n      </form>\r\n\r\n        <div className=\"recipes\">\r\n      {recipes.map(recipe => (\r\n\r\n          <Recipe\r\n                key={recipe.recipe.label}\r\n                title={recipe.recipe.label}\r\n                calories={recipe.recipe.calories}\r\n                image={recipe.recipe.image}\r\n                source={recipe.recipe.source}\r\n                ingredients={recipe.recipe.ingredients}/>\r\n\r\n      ))}\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}